import numpy
from JPEG.DCT.encode.function import DCT
from JPEG.JPEG.function import *

def quantized(image, coefficient : numpy.ndarray) -> numpy.ndarray:
    return image/coefficient

def zigzag_ordering(image : numpy.ndarray) -> list[int]:
    def sort(position):
        x, y = position
        return (x + y, -y if (x + y) % 2 else y)
    index = range(8)
    zigzag = []
    last = 0
    for index, (x, y) in enumerate(sorted(((x, y) for x in index for y in index), key = sort)):
        zigzag.append(image[x][y])
        # FIXME : self.image...
        if image[x][y] != 0:
            last = index
    return zigzag[:last + 1] + ["EOB"]

def DC(value : int) -> str:
    if value < 0:
        binary = format(-value, "b").replace("1", "2").replace("0", "1").replace("2", "0")
    elif value == 0:
        binary = ""
    else:
        binary = format(value, "b")
    return ["010", "011", "100", "00", "101", "110", "1110", "11110", "111110", "1111110", "11111110", "111111110",][len(binary)] + binary

def AC(value : int, run : int = 0) -> str:
    if value == "EOB":
        return "1010"
    if value < 0:
        binary = format(-value, "b").replace("1", "2").replace("0", "1").replace("2", "0")
    else:
        binary = format(value, "b")
    return [
        [          "00",               "01",              "100",             "1011",            "11010",           "111000",          "1111000",       "1111110110", "1111111110000010", "1111111110000011",],
        [        "1100",           "111001",          "1111001",        "111110110",      "11111110110", "1111111110000100", "1111111110000101", "1111111110000110", "1111111110000111", "1111111110001000",],
        [       "11011",         "11111000",       "1111110111", "1111111110001001", "1111111110001010", "1111111110001011", "1111111110001100", "1111111110001101", "1111111110001110", "1111111110001111",],
        [      "111010",        "111110111",      "11111110111", "1111111110010000", "1111111110010001", "1111111110010010", "1111111110010011", "1111111110010100", "1111111110010101", "1111111110010110",],
        [      "111011",       "1111111000", "1111111110010111", "1111111110011000", "1111111110011001", "1111111110011010", "1111111110011011", "1111111110011100", "1111111110011101", "1111111110011110",],
        [     "1111010",       "1111111001", "1111111110011111", "1111111110100000", "1111111110100001", "1111111110100010", "1111111110100011", "1111111110100100", "1111111110100101", "1111111110100110",],
        [     "1111011",      "11111111000", "1111111110100111", "1111111110101000", "1111111110101001", "1111111110101010", "1111111110101011", "1111111110101100", "1111111110101101", "1111111110101110",],
        [    "11111001",      "11111111001", "1111111110101111", "1111111110110000", "1111111110110001", "1111111110110010", "1111111110110011", "1111111110110100", "1111111110110101", "1111111110110110",],
        [    "11111010",  "111111111000000", "1111111110110111", "1111111110111000", "1111111110111001", "1111111110111010", "1111111110111011", "1111111110111100", "1111111110111101", "1111111110111110",],
        [   "111111000", "1111111110111111", "1111111111000000", "1111111111000001", "1111111111000010", "1111111111000011", "1111111111000100", "1111111111000101", "1111111111000110", "1111111111000111",],
        [   "111111001", "1111111111001000", "1111111111001001", "1111111111001010", "1111111111001011", "1111111111001100", "1111111111001101", "1111111111001110", "1111111111001111", "1111111111010000",],
        [   "111111010", "1111111111010001", "1111111111010010", "1111111111010011", "1111111111010100", "1111111111010101", "1111111111010110", "1111111111010111", "1111111111011000", "1111111111011001",],
        [  "1111111010", "1111111111011010", "1111111111011011", "1111111111011100", "1111111111011101", "1111111111011110", "1111111111011111", "1111111111100000", "1111111111100001", "1111111111100010",],
        [ "11111111010", "1111111111100011", "1111111111100100", "1111111111100101", "1111111111100110", "1111111111100111", "1111111111101000", "1111111111101001", "1111111111101010", "1111111111101011",],
        ["111111110110", "1111111111101100", "1111111111101101", "1111111111101110", "1111111111101111", "1111111111110000", "1111111111110001", "1111111111110010", "1111111111110011", "1111111111110100",],
        ["111111110111", "1111111111110101", "1111111111110110", "1111111111110111", "1111111111111000", "1111111111111001", "1111111111111010", "1111111111111100", "1111111111111101", "1111111111111110",],
    ][run][len(binary) - 1] + binary

def encode(image : numpy.ndarray, last_value = 0, value : int = 50) -> str:
    """
    Function to encode image in JPEG format.
    """

    # Create image #
    image = quantized(DCT(image), coefficient(value))
    image = numpy.around(image, 0).astype(int)
    image = zigzag_ordering(image)

    # Convert image
    jpeg = DC(image[0] - last_value)
    count_0 = 0
    for k in image[1:]:
        if k == 0 and count_0 < 15:
            count_0 += 1
        else:
            jpeg += AC(k, count_0)
            count_0 = 0
    return jpeg, image[0]

def encode_color(image : numpy.ndarray, last_value = 0, value : int = 50) -> str:
    """
    Function to encode image in JPEG format.
    """

    # Create image #
    image = quantized(DCT(image), coefficient_color(value))
    image = numpy.around(image, 0).astype(int)
    image = zigzag_ordering(image)

    # Convert image
    jpeg = DC(image[0] - last_value)
    count_0 = 0
    for k in image[1:]:
        if k == 0 and count_0 < 15:
            count_0 += 1
        else:
            jpeg += AC(k, count_0)
            count_0 = 0
    return jpeg, image[0]
