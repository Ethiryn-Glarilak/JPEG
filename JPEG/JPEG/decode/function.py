import numpy
from JPEG.DCT.decode.function import *
from JPEG.JPEG.function import *

def extractDC(jpeg, start = 0, last_value : int = 0) -> tuple[list[int], int]:
    DC_code = {
        "010"       : 0,  "011"       : 1,
        "100"       : 2,  "00"        : 3,
        "101"       : 4,  "110"       : 5,
        "1110"      : 6,  "11110"     : 7,
        "111110"    : 8,  "1111110"   : 9,
        "11111110"  : 10, "111111110" : 11,
    }
    index = start
    while DC_code.get(jpeg[start:index]) is None:
        index += 1
    index_end = index + DC_code.get(jpeg[start:index])
    if jpeg[index:index_end] == "":
        return [last_value], index_end
    if jpeg[index] == "0":
        return [- int(jpeg[index:index_end].replace("1", "2").replace("0", "1").replace("2", "0"), 2) + last_value], index_end
    else:
        return [int(jpeg[index:index_end], 2) + last_value], index_end

def extractAC(jpeg, index : int = 0) -> list[int]:
    AC_code = {
        "1010"             : "EOB",
        "00"               : (0, 1), "01"               : (0, 2), "100"              : (0, 3), "1011"             : (0, 4), "11010"            : (0, 5),
        "111000"           : (0, 6), "1111000"          : (0, 7), "1111110110"       : (0, 8), "1111111110000010" : (0, 9), "1111111110000011" : (0, 10),
        "1100"             : (1, 1), "111001"           : (1, 2), "1111001"          : (1, 3), "111110110"        : (1, 4), "11111110110"      : (1, 5),
        "1111111110000100" : (1, 6), "1111111110000101" : (1, 7), "1111111110000110" : (1, 8), "1111111110000111" : (1, 9), "1111111110001000" : (1, 10),
        "11011"            : (2, 1), "11111000"         : (2, 2), "1111110111"       : (2, 3), "1111111110001001" : (2, 4), "1111111110001010" : (2, 5),
        "1111111110001011" : (2, 6), "1111111110001100" : (2, 7), "1111111110001101" : (2, 8), "1111111110001110" : (2, 9), "1111111110001111" : (2, 10),
        "111010"           : (3, 1), "111110111"        : (3, 2), "11111110111"      : (3, 3), "1111111110010000" : (3, 4), "1111111110010001" : (3, 5),
        "1111111110010010" : (3, 6), "1111111110010011" : (3, 7), "1111111110010100" : (3, 8), "1111111110010101" : (3, 9), "1111111110010110" : (3, 10),
        "111011"           : (4, 1), "1111111000"       : (4, 2), "1111111110010111" : (4, 3), "1111111110011000" : (4, 4), "1111111110011001" : (4, 5),
        "1111111110011010" : (4, 6), "1111111110011011" : (4, 7), "1111111110011100" : (4, 8), "1111111110011101" : (4, 9), "1111111110011110" : (4, 10),
        "1111010"          : (5, 1), "1111111001"       : (5, 2), "1111111110011111" : (5, 3), "1111111110100000" : (5, 4), "1111111110100001" : (5, 5),
        "1111111110100010" : (5, 6), "1111111110100011" : (5, 7), "1111111110100100" : (5, 8), "1111111110100101" : (5, 9), "1111111110100110" : (5, 10),
        "1111011"          : (6, 1), "11111111000"      : (6, 2), "1111111110100111" : (6, 3), "1111111110101000" : (6, 4), "1111111110101001" : (6, 5),
        "1111111110101010" : (6, 6), "1111111110101011" : (6, 7), "1111111110101100" : (6, 8), "1111111110101101" : (6, 9), "1111111110101110" : (6, 10),
        "11111001"         : (7, 1), "11111111001"      : (7, 2), "1111111110101111" : (7, 3), "1111111110110000" : (7, 4), "1111111110110001" : (7, 5),
        "1111111110110010" : (7, 6), "1111111110110011" : (7, 7), "1111111110110100" : (7, 8), "1111111110110101" : (7, 9), "1111111110110110" : (7, 10),
        "11111010"         : (8, 1), "111111111000000"  : (8, 2), "1111111110110111" : (8, 3), "1111111110111000" : (8, 4), "1111111110111001" : (8, 5),
        "1111111110111010" : (8, 6), "1111111110111011" : (8, 7), "1111111110111100" : (8, 8), "1111111110111101" : (8, 9), "1111111110111110" : (8, 10),
        "111111000"        : (9, 1), "1111111110111111" : (9, 2), "1111111111000000" : (9, 3), "1111111111000001" : (9, 4), "1111111111000010" : (9, 5),
        "1111111111000011" : (9, 6), "1111111111000100" : (9, 7), "1111111111000101" : (9, 8), "1111111111000110" : (9, 9), "1111111111000111" : (9, 10),
        "111111001"        : (10, 1), "1111111111001000" : (10, 2), "1111111111001001" : (10, 3), "1111111111001010" : (10, 4), "1111111111001011" : (10, 5),
        "1111111111001100" : (10, 6), "1111111111001101" : (10, 7), "1111111111001110" : (10, 8), "1111111111001111" : (10, 9), "1111111111010000" : (10, 10),
        "111111010"        : (11, 1), "1111111111010001" : (11, 2), "1111111111010010" : (11, 3), "1111111111010011" : (11, 4), "1111111111010100" : (11, 5),
        "1111111111010101" : (11, 6), "1111111111010110" : (11, 7), "1111111111010111" : (11, 8), "1111111111011000" : (11, 9), "1111111111011001" : (11, 10),
        "1111111010"       : (12, 1), "1111111111011010" : (12, 2), "1111111111011011" : (12, 3), "1111111111011100" : (12, 4), "1111111111011101" : (12, 5),
        "1111111111011110" : (12, 6), "1111111111011111" : (12, 7), "1111111111100000" : (12, 8), "1111111111100001" : (12, 9), "1111111111100010" : (12, 10),
        "11111111010"      : (13, 1), "1111111111100011" : (13, 2), "1111111111100100" : (13, 3), "1111111111100101" : (13, 4), "1111111111100110" : (13, 5),
        "1111111111100111" : (13, 6), "1111111111101000" : (13, 7), "1111111111101001" : (13, 8), "1111111111101010" : (13, 9), "1111111111101011" : (13, 10),
        "111111110110"     : (14, 1), "1111111111101100" : (14, 2), "1111111111101101" : (14, 3), "1111111111101110" : (14, 4), "1111111111101111" : (14, 5),
        "1111111111110000" : (14, 6), "1111111111110001" : (14, 7), "1111111111110010" : (14, 8), "1111111111110011" : (14, 9), "1111111111110100" : (14, 10),
        "111111110111"     : (15, 1), "1111111111110101" : (15, 2), "1111111111110110" : (15, 3), "1111111111110111" : (15, 4), "1111111111111000" : (15, 5),
        "1111111111111001" : (15, 6), "1111111111111010" : (15, 7), "1111111111111100" : (15, 8), "1111111111111101" : (15, 9), "1111111111111110" : (15, 10),
    }
    AC = []
    i = index
    while True:
        i += 1
        if AC_code.get(jpeg[index:i]) is None:
            continue
        if AC_code.get(jpeg[index:i]) == "EOB":
            AC.append(AC_code.get(jpeg[index:i]))
            return AC, i
        index_end = i + AC_code.get(jpeg[index:i])[1]
        AC.extend(0 for _ in range(AC_code.get(jpeg[index:i])[0]))
        if jpeg[i] == "0":
            AC.append(- int(jpeg[i:index_end].replace("1", "2").replace("0", "1").replace("2", "0"), 2))
        else:
            AC.append(int(jpeg[i:index_end], 2))
        i = index_end
        index = index_end

def list_to_zigzag(zigzag : list[int]) -> numpy.ndarray:
    def sort(position):
        x, y = position
        return (x + y, -y if (x + y) % 2 else y)
    index = range(8)
    image = numpy.zeros((8, 8))
    for index, (x, y) in enumerate(sorted(((x, y) for x in index for y in index), key = sort)):
        if zigzag[index] == "EOB":
            break
        image[x][y] = zigzag[index]
    return image

def decode(jpeg : str, start = 0, last_value : int = 0, value : int = 50) -> numpy.ndarray:
    image, index = extractDC(jpeg, start, last_value)
    last_value = image[0]
    extend, index = extractAC(jpeg, index)
    image.extend(extend)
    image = list_to_zigzag(image) * coefficient(value)
    image = JDm1_calcul(image)
    return image + 128, index, last_value

def decode_color(jpeg : str, start = 0, last_value : int = 0, value : int = 50) -> numpy.ndarray:
    image, index = extractDC(jpeg, start, last_value)
    last_value = image[0]
    extend, index = extractAC(jpeg, index)
    image.extend(extend)
    image = list_to_zigzag(image) * coefficient_color(value)
    image = JDm1_calcul(image)
    return image + 128, index, last_value
